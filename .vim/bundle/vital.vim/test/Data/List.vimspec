Describe Data.List
  Before all
    let List = vital#vital#new().import('Data.List')
  End

  Describe .pop()
    It removes the last element from a list and returns that element
      let a = [1,2,3]
      Assert Equals(List.pop(a), 3)
      Assert Equals(a, [1, 2])
      Assert Equals(List.pop(a), 2)
      Assert Equals(a, [1])
      Assert Equals(List.pop(a), 1)
      Assert Equals(a, [])
      Assert Equals(List.pop(range(10)), 9)
    End

    It causes an error when the list is empty
      Throw /^Vim(\w*):E684:/ List.pop([])
    End
  End

  Describe .push()
    It appends an element to a list and returns the list itself
      let a = []
      Assert Equals(List.push(a, 1), [1])
      Assert Equals(a, [1])
      Assert Equals(List.push(a, 2), [1,2])
      Assert Equals(a, [1,2])
      Assert Equals(List.push([1, 2, 3], 4), [1, 2, 3, 4])
      Assert Equals(List.push(range(7, 9), 10), [7, 8, 9, 10])
    End
  End

  Describe .shift()
    It removes the first element from a list and returns that element
      let a = [1,2,3]
      Assert Equals(List.shift(a), 1)
      Assert Equals(a, [2,3])
      Assert Equals(List.shift(a), 2)
      Assert Equals(a, [3])
      Assert Equals(List.shift(a), 3)
      Assert Equals(a, [])
      Assert Equals(List.shift(range(10)), 0)
    End

    It causes an error when the list is empty
      Throw /^Vim(\w*):E684:/ List.shift([])
    End
  End

  Describe .unshift()
    It inserts an element to the head of a list and returns the list itself
      let a = []
      Assert Equals(List.unshift(a, 1), [1])
      Assert Equals(a, [1])
      Assert Equals(List.unshift(a, 2), [2,1])
      Assert Equals(a, [2,1])
      Assert Equals(List.unshift([1, 2, 3], 4), [4, 1, 2, 3])
      Assert Equals(List.unshift(range(7, 9), 10), [10, 7, 8, 9])
    End
  End

  Describe .cons()
    It makes new list which first item is {val} and the rest of items are {list}.
      let a = []
      Assert Equals(List.cons(1, a), [1])
      Assert Equals(a, [])
      let a = [1]
      Assert Equals(List.cons(2, a), [2, 1])
      Assert Equals(a, [1])
      Assert Equals(List.cons(1, [2, 3]), [1, 2, 3])
      Assert Equals(List.cons(1, []), [1])
      Assert Equals(List.cons([1], [2, 3]), [[1], 2, 3])
    End
  End

  Describe .conj()
    It makes new list which last items are {val} and the preceding items remain {list}.
      let a = []
      Assert Equals(List.conj(a, 1), [1])
      Assert Equals(a, [])
      let a = [1]
      Assert Equals(List.conj(a, 2), [1, 2])
      Assert Equals(a, [1])
      Assert Equals(List.conj([2, 3], 1), [2, 3, 1])
      Assert Equals(List.conj([], 1), [1])
      Assert Equals(List.conj([2, 3], [1]), [2, 3, [1]])
    End
  End

  Describe .uniq()
    It makes a list unique
      let a = ['vim', 'emacs', 'vim', 'vim']
      Assert Equals(List.uniq(a), ['vim', 'emacs'])
      Assert Equals(a, ['vim', 'emacs', 'vim', 'vim'])
      Assert Equals(List.uniq([1.23, [1], [1], 1.23]), [1.23, [1]])
      Assert Equals(List.uniq([{'a': 0, 'b': 1}, {'b': 1, 'a': 0}]), [{'a': 0, 'b': 1}])
    End

    It supports empty strings as well
      Assert Equals(List.uniq(['', '', 'v', 'vv', '', 'vv', 'v']), ['', 'v', 'vv'])
    End
  End

  Describe .uniq_by()
    It makes a list unique based on given expression
      Assert Equals(
      \ List.uniq_by([
      \       'vim', 'Vim', 'VIM', 'emacs', 'Emacs', 'EMACS', 'gVim', 'GVIM'
      \     ],
      \     'tolower(v:val)'
      \   ),
      \ [
      \   'vim', 'emacs', 'gVim'
      \ ]
      \ )
    End
  End

  Describe .clear()
    It clears the all items of a list
      let list = [1, 2, 3]
      Assert Equals(List.clear(list), [])
      Assert Equals(list, [])
    End

    It returns the passed list directly
      let list = [1, 2, 3]
      Assert Same(List.clear(list), list)
      Assert Equals(list, [])
    End

    It has no effects for empty list
      let list = []
      Assert Equals(List.clear(list), [])
      Assert Equals(list, [])
    End
  End

  Describe .max_by()
    It returns a maximum value in the list through the given expr.
      Assert Equals(List.max_by(['hoge', 'foo', 'hehehe', 'yahoo'], 'len(v:val)'), 'hehehe')
      Assert Equals(List.max_by([20, -50, -15, 30], 'abs(v:val)'), -50)
    End
    It returns 0 if the list is empty.
      Assert Equals(List.max_by([], 'v:val'), 0)
    End
  End

  Describe .min_by()
    It returns a minimum value in the list through the given expr.
      Assert Equals(List.min_by(['hoge', 'foo', 'hehehe', 'yahoo'], 'len(v:val)'), 'foo')
      Assert Equals(List.min_by([20, -50, -15, 30], 'abs(v:val)'), -15)
    End
    It returns 0 if the list is empty.
      Assert Equals(List.min_by([], 'v:val'), 0)
    End
  End

  Describe .span()
    It splits a list into two lists. The former is until the given condition doesn't satisfy.
      Assert Equals(List.span('v:val < 5', [1, 3, 5, 2]), [[1, 3], [5, 2]])
      Assert Equals(List.span('v:val > 3', [1, 2, 3, 4, 5]), [[], [1, 2, 3, 4, 5]])
      Assert Equals(List.span('v:val < 3', [1, 2, 3, 4, 5]), [[1, 2], [3, 4, 5]])
    End

    It of course handles list of list.
      Assert Equals(List.span('len(v:val) > 0', [[1], [2, 3], [], [4]]),
            \ [[[1], [2, 3]], [[], [4]]])
    End
  End

  Describe .break()
    It splits a list into two lists. The latter is from the given condition satisfies.
      Assert Equals(List.break('v:val == 5', [1, 3, 5, 2]), [[1, 3], [5, 2]])
      Assert Equals(List.break('v:val > 3', [1, 2, 3, 4, 5]), [[1, 2, 3], [4, 5]])
      Assert Equals(List.break('v:val < 3', [1, 2, 3, 4, 5]), [[], [1, 2, 3, 4, 5]])
    End

    It of course handles list of list.
      Assert Equals(List.break('len(v:val) == 0', [[1], [2, 3], [], [4]]),
            \ [[[1], [2, 3]], [[], [4]]],)
    End
  End

  Describe .take_while()
    It creates a list from another one, it inspects the original list and takes from its elements to the moment when the condition fails, then it stops processing
      Assert Equals(List.take_while('v:val < 5', [1, 3, 5, 2]), [1, 3])
      Assert Equals(List.take_while('v:val > 3', [1, 2, 3, 4, 5]), [])
      Assert Equals(List.take_while('v:val < 3', [1, 2, 3, 4, 5]), [1, 2])
    End

    It of course handles list of list.
      Assert Equals(List.take_while('len(v:val) > 0', [[1], [2, 3], [], [4]]),
            \ [[1], [2, 3]])
    End
  End

  Describe .drop_while()
    It creates a list from another one, it inspects the original list and drops from its elements to the moment when the condition fails, then it stops processing
      Assert Equals(List.drop_while('v:val < 5', [1, 3, 5, 2]), [5, 2])
      Assert Equals(List.drop_while('v:val > 3', [1, 2, 3, 4, 5]), [1, 2, 3, 4, 5])
      Assert Equals(List.drop_while('v:val < 3', [1, 2, 3, 4, 5]), [3, 4, 5])
    End

    It of course handles list of list.
      Assert Equals(List.drop_while('len(v:val) > 0', [[1], [2, 3], [], [4]]),
            \ [[], [4]])
    End
  End

  Describe .partition()
    It takes a predicate a list and returns the pair of lists of elements which do and do not satisfy the predicate.
      Assert Equals(List.partition('v:val % 2 == 0', range(5)), [[0, 2, 4], [1, 3]])
    End
  End

  Describe .all()
    It returns true if all items in the list fulfill the condition.
      Assert True(List.all('v:val % 2 == 0', [2, 8, 4, 6]))
      Assert False(List.all('v:val % 2 == 0', [2, 8, 5, 6]))
      Assert True(List.all('0 < v:val', [2, 8, 4, 6]))
      Assert False(List.all('0 < v:val', [2, 0, 4, 6]))
    End

    It returns true if the list is empty.
      Assert True(List.all('v:val', []))
    End
  End

  Describe .any()
    It returns true if at least one item in the list fulfills the condition.
      Assert False(List.any('v:val % 2 == 1', [2, 8, 4, 6]))
      Assert True(List.any('v:val % 2 == 1', [2, 8, 5, 6]))
      Assert False(List.any('0 >= v:val', [2, 8, 4, 6]))
      Assert True(List.any('0 >= v:val', [2, 0, 4, 6]))
    End

    It returns false if the list is empty.
      Assert False(List.any('v:val', []))
    End
  End

  Describe .and()
    It returns the conjunction of a boolean list.
      Assert True(List.and([1, 1, 1, 1]))
      Assert False(List.and([1, 0, 1, 1]))
      Assert False(List.and([0, 0, 0, 0]))
    End

    It returns true if the list is empty.
      Assert True(List.and([]))
    End
  End

  Describe .and()
    It returns the disjunction of a boolean list.
      Assert True(List.or([1, 1, 1, 1]))
      Assert True(List.or([1, 0, 1, 1]))
      Assert False(List.or([0, 0, 0, 0]))
    End
    It returns false if the list is empty.
      Assert False(List.or([]))
    End
  End

  Describe .map_accum()
    It is similar to map() but holds previous accumulator as well
      Assert Equals(List.map_accum('[v:val + v:memo, v:memo]', [1, 2, 3], 10), [11, 12, 13])
      Assert Equals(List.map_accum('[v:val + v:memo, v:memo + 1]', [1, 2, 3], 10), [11, 13, 15])
    End
    " TODO test more details
  End

  Describe .foldl()
    It folds a list from left
      Assert Equals(List.foldl('v:memo + v:val', 0, range(1, 10)), 55)
      Assert Equals(List.foldl('[v:memo, v:val]', [], [1, 2]), [[[], 1], 2])
    End

    It does nothing if the list is empty
      Assert Equals(List.foldl('echoerr omg', 123, []), 123)
    End
  End

  Describe .foldl1()
    It folds a list from left
      Assert Equals(List.foldl1('v:memo + v:val', range(1, 10)), 55)
      Assert Equals(List.foldl1('[v:memo, v:val]', [1, 2]), [1, 2])
    End

    It causes an error when the list is empty
      Throw /^vital: Data.List: foldl1$/ List.foldl1('123', [])
    End
  End

  Describe .foldr()
    It folds a list from right
      Assert Equals(List.foldr('v:memo + v:val', 0, range(1, 10)), 55)
      Assert Equals(List.foldr('[v:memo, v:val]', [], [1, 2]), [[[], 2], 1])
    End

    It does nothing if the list is empty
      Assert Equals(List.foldr('echoerr omg', 123, []), 123)
    End
  End

  Describe .foldr1()
    It folds a list from left
      Assert Equals(List.foldr1('v:memo + v:val', range(1, 10)), 55)
      Assert Equals(List.foldr1('[v:memo, v:val]', [1, 2]), [2, 1])
    End

    It causes an error when the list is empty
      Throw /^vital: Data.List: foldr1$/ List.foldr1('123', [])
    End
  End

  Describe .zip()
    It returns mixed list from arguments
      Assert Equals(List.zip([1,2,3]), [[1],[2],[3]])
      Assert Equals(List.zip([1,2,3],[4,5,6],[7,8,9]), [[1,4,7],[2,5,8],[3,6,9]])
      Assert Equals(List.zip([1,2,3],[4,5],[7,8,9]), [[1,4,7],[2,5,8]])
    End
  End

  Describe .with_index()
    It returns list with index
      Assert Equals(List.with_index(['a', 'b', 'c']), [['a', 0], ['b', 1], ['c', 2]])
      Assert Equals(List.with_index(['a', 'b', 'c'], 3), [['a', 3], ['b', 4], ['c', 5]])
    End
  End

  Describe .flatten()
    It returns list flatten
      Assert Equals(List.flatten(['a', ['b'], 'c']), ['a', 'b', 'c'])
      Assert Equals(List.flatten(['a', [['b'], 'c']]), ['a', 'b', 'c'])
      Assert Equals(List.flatten([['a', ['b']], 'c']), ['a', 'b', 'c'])
      Assert Equals(List.flatten(['a', [[['b']], 'c']]), ['a', 'b', 'c'])
      Assert Equals(List.flatten(['a', [[['b']], 'c']], 1), ['a', [['b']], 'c'])
      Assert Equals(List.flatten([[['a']], [[['b']], 'c']], 1), [['a'], [['b']], 'c'])
      Assert Equals(List.flatten([[['a']], [[['b']], 'c']], 2), ['a', ['b'], 'c'])
      Assert Equals(List.flatten([[['a']], [[['b']], 'c']], 3), ['a', 'b', 'c'])
      Assert Equals(List.flatten([[['a']], [[['b']], 'c']], 4), ['a', 'b', 'c'])
      Assert Equals(List.flatten([[['a']], [[['b']], 'c']], 10), ['a', 'b', 'c'])
    End
  End

  Describe .find()
    Before all
      function! MyPredicate(x) abort
        return a:x % 2 == 0
      endfunction

      function! MyPredicate2(x) abort
        return a:x % 10 == 0
      endfunction

      function! MyPredicate3(x) abort
        return a:x =~ 'y'
      endfunction
    End
    It returns the value if found by string expression
      Assert Equals(List.find([1, 2, 3], '*not-found*', 'v:val % 2 == 0'), 2)
      Assert Equals(List.find([1, 2, 3, 1, 2, 3], '*not-found*', 'v:val % 2 == 0'), 2)
      Assert Equals(List.find([1, 2, 3], '*not-found*', 'v:val % 10 == 0'), '*not-found*')
      Assert Equals(List.find([], '*not-found*', 'v:val % 2 == 0'), '*not-found*')

      Assert Equals(List.find(['hi', 'yo'], -1, 'v:val =~ "y"'), 'yo')
    End
    It returns the value if found by funcref
      Assert Equals(List.find([1, 2, 3], '*not-found*', function('MyPredicate')), 2)
      Assert Equals(List.find([1, 2, 3, 1, 2, 3], '*not-found*', function('MyPredicate')), 2)
      Assert Equals(List.find([1, 2, 3], '*not-found*', function('MyPredicate2')), '*not-found*')
      Assert Equals(List.find([], '*not-found*', function('MyPredicate')), '*not-found*')

      Assert Equals(List.find(['hi', 'yo'], -1, function('MyPredicate3')), 'yo')
    End
    After all
      delfunction MyPredicate
      delfunction MyPredicate2
      delfunction MyPredicate3
    End
  End

  Describe .find_index()
    It returns the index if found
      Assert Equals(List.find_index([1, 2, 3], 'v:val % 2 == 0'), 1)
      Assert Equals(List.find_index(["hoge", "fuga", "piyo"], 'v:val =~# "o"'), 0)
      Assert Equals(List.find_index([1, 2, 3], 'v:val % 2 == 1', 1), 2)
      Assert Equals(List.find_index(["hoge", "fuga", "piyo"], 'v:val =~# "o"', -2), 2)
    End
    It returns -1 or default value if not found
      Assert Equals(List.find_index([], '1'), -1)
      Assert Equals(List.find_index(["hoge", "fuga", "piyo"], 'v:val =~# "x"'), -1)
      Assert Equals(List.find_index([], '1', 0, 999), 999)
      Assert Equals(List.find_index(["hoge", "fuga", "piyo"], 'v:val =~# "x"', 0, "not found"), "not found")
    End
  End

  Describe .find_last_index()
    It returns the index if found
      Assert Equals(List.find_last_index([1, 2, 3, 4], 'v:val % 2 == 0'), 3)
      Assert Equals(List.find_last_index(["hoge", "fuga", "piyo"], 'v:val =~# "o"'), 2)
      Assert Equals(List.find_last_index([1, 2, 3, 4], 'v:val % 2 == 0', 1), 1)
      Assert Equals(List.find_last_index(["hoge", "fuga", "piyo"], 'v:val =~# "o"', -2), 0)
    End
    It returns -1 or default value if not found
      Assert Equals(List.find_last_index([], '1'), -1)
      Assert Equals(List.find_last_index(["hoge", "fuga", "piyo"], 'v:val =~# "x"'), -1)
      Assert Equals(List.find_last_index([], '1', 0, 999), 999)
      Assert Equals(List.find_last_index(["hoge", "fuga", "piyo"], 'v:val =~# "x"', 0, "not found"), "not found")
    End
  End

  Describe .find_indices()
    It returns index list if found
      Assert Equals(List.find_indices([1, 2, 3], 'v:val % 2 == 1'), [0, 2])
      Assert Equals(List.find_indices(["hoge", "fuga", "piyo"], 'v:val =~# "o"'), [0, 2])
      Assert Equals(List.find_indices([1, 2, 3], 'v:val % 2 == 1', 1), [2])
      Assert Equals(List.find_indices([], '1'), [])
      Assert Equals(List.find_indices(["hoge", "fuga", "piyo"], 'v:val =~# "x"'), [])
    End
  End

  Describe .has_common_items()
    It returns true/false if given Lists does/doesn't have any common item(s)
      Assert True(List.has_common_items(['a', 'b', 'c'], ['b', 'c']))
      Assert True(List.has_common_items(['a', 'c'], ['b', 'c']))
      Assert False(List.has_common_items(['a'], ['b', 'c']))
      Assert False(List.has_common_items([], ['b', 'c']))
      Assert False(List.has_common_items(['a'], []))
      Assert False(List.has_common_items([], []))
    End
  End

  Describe .intersect()
    It returns elements which are common with two lists
      Assert Equals(List.intersect(['a', 'b', 'c'], ['b', 'c']), ['b', 'c'])
      Assert Equals(List.intersect(['a', 'c'], ['b', 'c']), ['c'])
      Assert Equals(List.intersect(['a'], ['b', 'c']), [])
      Assert Equals(List.intersect([], ['b', 'c']), [])
      Assert Equals(List.intersect(['a'], []), [])
      Assert Equals(List.intersect([], []), [])
      Assert Equals(List.intersect(['a', 'a'], ['a', 'a']), ['a'])
      Assert Equals(List.intersect([function('tr')], [function('tr')]), [function('tr')])
    End
  End

  Describe .group_by()
    It returns grouped dictionary
      Assert Equals(List.group_by([], 'len(v:val)'), {})
      Assert Equals(List.group_by(['a', 'b', 'ab', 'bc'], 'len(v:val)'), {'1': ['a', 'b'], '2': ['ab', 'bc']})
      Assert Equals(List.group_by(['a', 'b', 'ab', 'bc'], 'v:val[0]'), {'a': ['a', 'ab'], 'b': ['b', 'bc']})
      Assert Equals(List.group_by(range(4), 'v:val % 2 == 0 ? "aa" : 1.0'), {'aa': [0, 2], '1.0': [1, 3]})
    End
  End

  function! My_predicate(a, b) abort
      return a:a - a:b
  endfunction

  Describe .binary_search()
    It search a list and return the index if success
      Assert Equals(List.binary_search([1, 3, 5, 7], 1), 0)
      Assert Equals(List.binary_search([1, 3, 5, 7], 3), 1)
      Assert Equals(List.binary_search([1, 3, 5, 7], 5), 2)
      Assert Equals(List.binary_search([1, 3, 5, 7], 7), 3)

      Assert Equals(List.binary_search([1, 3, 5, 7], 1, 'My_predicate'), 0)
      Assert Equals(List.binary_search([1, 3, 5, 7], 3, 'My_predicate'), 1)
      Assert Equals(List.binary_search([1, 3, 5, 7], 5, 'My_predicate'), 2)
      Assert Equals(List.binary_search([1, 3, 5, 7], 7, 'My_predicate'), 3)

      let f = {}
      function! f.func(a, b) dict abort
        return a:a - a:b
      endfunction

      Assert Equals(List.binary_search([1, 3, 5, 7], 1, f.func, f), 0)
      Assert Equals(List.binary_search([1, 3, 5, 7], 3, f.func, f), 1)
      Assert Equals(List.binary_search([1, 3, 5, 7], 5, f.func, f), 2)
      Assert Equals(List.binary_search([1, 3, 5, 7], 7, f.func, f), 3)

      Assert Equals(List.binary_search([1, 3, 5, 7], 1, f.func), 0)
      Assert Equals(List.binary_search([1, 3, 5, 7], 3, f.func), 1)
      Assert Equals(List.binary_search([1, 3, 5, 7], 5, f.func), 2)
      Assert Equals(List.binary_search([1, 3, 5, 7], 7, f.func), 3)

      function! f.bylength(a, b) dict abort
        return len(a:a) - len(a:b)
      endfunction

      Assert Equals(List.binary_search(['a', 'aa', 'aaa', 'aaaa'], 'a', f.bylength), 0)
      Assert Equals(List.binary_search(['a', 'aa', 'aaa', 'aaaa'], 'aa', f.bylength), 1)
      Assert Equals(List.binary_search(['a', 'aa', 'aaa', 'aaaa'], 'aaa', f.bylength), 2)
      Assert Equals(List.binary_search(['a', 'aa', 'aaa', 'aaaa'], 'aaaa', f.bylength), 3)
      Assert Equals(List.binary_search(['a', 'aa', 'aaa', 'aaaa'], 'aaaaa', f.bylength), -1)

      " Corner cases
      Assert Equals(List.binary_search([1], 1), 0)
    End

    It returns -1 if failed
      Assert Equals(List.binary_search([1, 3, 5, 7], 2), -1)
      Assert Equals(List.binary_search([1, 3, 5, 7], 2, 'My_predicate'), -1)
      Assert Equals(List.binary_search([], 1), -1)
      Assert Equals(List.binary_search([], 1, 'My_predicate'), -1)

      let f = {}
      function! f.func(a, b) dict abort
          return a:a - a:b
      endfunction

      Assert Equals(List.binary_search([1, 3, 5, 7], 2, f.func, f), -1)
      Assert Equals(List.binary_search([], 1, f.func, f), -1)
      Assert Equals(List.binary_search([1, 3, 5, 7], 2, f.func), -1)
      Assert Equals(List.binary_search([], 1, f.func), -1)
    End
  End

  Describe .product()
    It returns Cartesian product of elements in given lists
      Assert Equals(List.product([[1], [2]]), ([[1, 2]]))
      Assert Equals(List.product([[1, 2], [4, 5]]), ([[1, 4], [1, 5], [2, 4], [2, 5]]))
      Assert Equals(List.product([range(2), range(2), range(2)]), ([[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]]))
    End
  End

  Describe .permutations()
    It returns permutations of elements in given list
      Assert Equals(List.permutations([1, 2, 3]), [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]])
      Assert Equals(List.permutations([]), [[]])
    End

    It returns r length permutations of elements in given list if r is given
      Assert Equals(List.permutations([1, 2, 3], 1), [[1], [2], [3]])
      Assert Equals(List.permutations([1, 2, 3], 2), [[1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 2]])
      Assert Equals(List.permutations([1, 2, 3], 4), [])
    End
  End

  Describe .combinations()
    It returns combinations of elements in given list
      Assert Equals(List.combinations([1, 2, 3, 4], 2), [[1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4]])
      Assert Equals(List.combinations([5, 2, 3, 1], 3), [[5, 2, 3], [5, 2, 1], [5, 3, 1], [2, 3, 1]])
      Assert Equals(List.combinations([1, 2, 3], 4), [])
    End
  End

End

