Describe Bitwise
  Before all
    let B = vital#vital#new().import('Bitwise')
    " NOTE:
    " An int literal larger than or equal to 0x8000000000000000 will be rounded
    " to 0x7FFFFFFFFFFFFFFF after Vim 8.0.0219, so create it without literal
    let x8000000000000000 = 0/0
  End

  Describe .lshift()
    Context with small numbers
      It shifts bits to left
        Assert Equals(B.lshift(0, 0), 0)
        Assert Equals(B.lshift(0, 1), 0)
        Assert Equals(B.lshift(0, 31), 0)
        Assert Equals(B.lshift(0, 32), 0)
        Assert Equals(B.lshift(1, 0), 0x1)
        Assert Equals(B.lshift(1, 1), 0x2)
        Assert Equals(B.lshift(1, 31), 0x80000000)
        Assert Equals(B.lshift(0x80000000, 0), 0x80000000)
      End
    End
    if has('num64')
      Context with 64bit number
        It shifts bits to left
          Assert Equals(B.lshift(1, 32), 0x100000000)
          Assert Equals(B.lshift(0x80000000, 1), 0x100000000)
          Assert Equals(B.lshift(1, 63), x8000000000000000)
          Assert Equals(B.lshift(1, 64), 1)
        End
        It shifts bits to left (random)
          Assert Equals(B.lshift(-6547820378035905891, -9), 5656521131977342976)
          Assert Equals(B.lshift(-3338945565435194024, -25), -1203960834368208896)
          Assert Equals(B.lshift(5765087922765281421, 52), -8588364489395535872)
          Assert Equals(B.lshift(8920998653320978603, 11), 7928609028908079104)
          Assert Equals(B.lshift(8442026461925972002, 38), -2096979230645551104)
          Assert Equals(B.lshift(3547367712430972932, 54), 72057594037927936)
          Assert Equals(B.lshift(8382076105951341210, 4), 4986009179254598048)
          Assert Equals(B.lshift(4785275337718270894, -6), -5188146770730811392)
          Assert Equals(B.lshift(-6707534047010871283, -13), 4640959416005296128)
          Assert Equals(B.lshift(5188294801009928667, -20), 4511955915741593600)
        End
      End
    else
      Context with 32bit number
        It shifts bits to left
          Assert Equals(B.lshift(1, 32), 1)
          Assert Equals(B.lshift(0x80000000, 1), 0)
        End
        It shifts bits to left (random)
          Assert Equals(B.lshift(1483929134, 14), -1114931200)
          Assert Equals(B.lshift(152442939, 25), 1979711488)
          Assert Equals(B.lshift(505850863, -32), 505850863)
          Assert Equals(B.lshift(1997594360, 18), 2078277632)
          Assert Equals(B.lshift(2121708807, -5), 939524096)
          Assert Equals(B.lshift(344493590, -27), -1861107008)
          Assert Equals(B.lshift(630127521, 14), -1092075520)
          Assert Equals(B.lshift(-601661263, 0), -601661263)
          Assert Equals(B.lshift(661012213, -26), -644891328)
          Assert Equals(B.lshift(828605241, -14), 216268800)
        End
      End
    endif
  End

  Describe .rshift()
    Context with small numbers
      It shifts bits to right
        Assert Equals(B.rshift(0, 0), 0)
        Assert Equals(B.rshift(0, 1), 0)
        Assert Equals(B.rshift(0, 31), 0)
        Assert Equals(B.rshift(0, 32), 0)
        Assert Equals(B.rshift(0x80000000, 0), 0x80000000)
        Assert Equals(B.rshift(0x80000000, 1), 0x40000000)
        Assert Equals(B.rshift(0x80000000, 31), 0x1)
        Assert Equals(B.rshift(1, 0), 0x1)
        Assert Equals(B.rshift(1, 1), 0)
      End
    End
    if has('num64')
      Context with 64bit number
        It shifts bits to right
          Assert Equals(B.rshift(0x80000000, 32), 0)
          Assert Equals(B.rshift(x8000000000000000, 32), 0x80000000)
          Assert Equals(B.rshift(x8000000000000000, 63), 1)
          Assert Equals(B.rshift(-1024, 1), 0x7ffffffffffffe00)
        End
        It shifts bits to right (random)
          Assert Equals(B.rshift(-268801553147510890, -39), 541744903342)
          Assert Equals(B.rshift(-8658667913393403549, 60), 8)
          Assert Equals(B.rshift(8684623827924321670, -54), 8481077956957345)
          Assert Equals(B.rshift(-2848134570708700373, 24), 929749578416)
          Assert Equals(B.rshift(-9109203526092417183, 23), 1113121574833)
          Assert Equals(B.rshift(1597408012962228558, 31), 743851071)
          Assert Equals(B.rshift(8548771603265437164, -19), 242970)
          Assert Equals(B.rshift(2784858960009211313, -9), 77)
          Assert Equals(B.rshift(5980153482236010223, -56), 23359974539984414)
          Assert Equals(B.rshift(5014075726800027940, -58), 78344933231250436)
        End
      End
    else
      Context with 32bit number
        It shifts bits to right
          Assert Equals(B.rshift(0x80000000, 32), 0x80000000)
          Assert Equals(B.rshift(-1024, 1), 0x7ffffe00)
        End
        It shifts bits to right (random)
          Assert Equals(B.rshift(-488472937, -18), 232329)
          Assert Equals(B.rshift(2077835096, 9), 4058271)
          Assert Equals(B.rshift(-944346085, -27), 104706912)
          Assert Equals(B.rshift(-410125501, -23), 7587581)
          Assert Equals(B.rshift(-976767239, 10), 3240429)
          Assert Equals(B.rshift(999071336, 20), 952)
          Assert Equals(B.rshift(1103884747, -13), 2105)
          Assert Equals(B.rshift(1971440513, -1), 0)
          Assert Equals(B.rshift(-440231805, -25), 30115121)
          Assert Equals(B.rshift(1872776440, 23), 223)
        End
      End
    endif
  End

  Describe .compare()
    It compares as unsigned int
      Assert Equals(B.compare(2, 1), 1)
      Assert Equals(B.compare(0xFFFFFFFE, 0xFFFFFFFF), -1)
      Assert Equals(B.compare(0x0FFFFFFF, 0xFFFFFFFF), -1)
    End
  End

  Describe .invert()
    It returns bitwise invert
      Assert Equals(B.invert(0), -0x1)
      Assert Equals(B.invert(0xffffffff), -0x100000000)
      Assert Equals(B.invert(0xf0f0f0f), -0xf0f0f10)
      Assert Equals(B.invert(0xf0f0f0f0), -0xf0f0f0f1)
      Assert Equals(B.invert(0xffff), -0x10000)
      Assert Equals(B.invert(0xff), -0x100)
      Assert Equals(B.invert(0xffffff), -0x1000000)
    End
    It returns bitwise invert (random)
      Assert Equals(B.invert(-2104009955), 2104009954)
      Assert Equals(B.invert(-1317510048), 1317510047)
      Assert Equals(B.invert(1806018573), -1806018574)
      Assert Equals(B.invert(-980665656), 980665655)
      Assert Equals(B.invert(-537231506), 537231505)
      Assert Equals(B.invert(-46151799), 46151798)
      Assert Equals(B.invert(1213208697), -1213208698)
      Assert Equals(B.invert(943205096), -943205097)
      Assert Equals(B.invert(2015127505), -2015127506)
      Assert Equals(B.invert(35201008), -35201009)
    End
  End

  Describe .and()
    It returns bitwise AND
      Assert Equals(B.and(0, 0), 0)
      Assert Equals(B.and(0xffffffff, 0), 0)
      Assert Equals(B.and(0xffffffff, 0xffffffff), 0xffffffff)
      Assert Equals(B.and(0xf0f0f0f0, 0xf0f0f0f), 0)
      Assert Equals(B.and(0xf0f0f0f0, 0xf0f0f0f0), 0xf0f0f0f0)
      Assert Equals(B.and(0xffff0000, 0xffff), 0)
      Assert Equals(B.and(0xff000000, 0xff), 0)
      Assert Equals(B.and(0xffffff00, 0xffffff), 0xffff00)
    End
    It returns bitwise AND (random)
      Assert Equals(B.and(-1296912273, -1904774433), -2110640049)
      Assert Equals(B.and(432461732, -859843378), 143053956)
      Assert Equals(B.and(2098863212, 959746948), 957353988)
      Assert Equals(B.and(144789504, -1435475015), 136331264)
      Assert Equals(B.and(-1325876821, -209876503), -1334277719)
      Assert Equals(B.and(-484132304, 491371309), 16824864)
      Assert Equals(B.and(-1787481070, 1602359046), 352322562)
      Assert Equals(B.and(-516431469, 1421177042), 1077239954)
      Assert Equals(B.and(-2028633248, 1046228473), 101974368)
      Assert Equals(B.and(764178285, 2068092473), 688129577)
    End
  End

  Describe .or()
    It returns bitwise OR
      Assert Equals(B.or(0, 0), 0)
      Assert Equals(B.or(0xffffffff, 0), 0xffffffff)
      Assert Equals(B.or(0xffffffff, 0xffffffff), 0xffffffff)
      Assert Equals(B.or(0xf0f0f0f0, 0xf0f0f0f), 0xffffffff)
      Assert Equals(B.or(0xf0f0f0f0, 0xf0f0f0f0), 0xf0f0f0f0)
      Assert Equals(B.or(0xffff0000, 0xffff), 0xffffffff)
      Assert Equals(B.or(0xff000000, 0xff), 0xff0000ff)
      Assert Equals(B.or(0xffffff00, 0xffffff), 0xffffffff)
    End
    It returns bitwise OR (random)
      Assert Equals(B.or(173374042, -686154780), -547390466)
      Assert Equals(B.or(988002410, 1611007623), 2062008047)
      Assert Equals(B.or(1617121838, 2063766753), 2070140655)
      Assert Equals(B.or(-68314761, -1067373081), -68305417)
      Assert Equals(B.or(2110784177, 1692066345), 2111496889)
      Assert Equals(B.or(-2063323858, -1250703135), -1250431505)
      Assert Equals(B.or(-555502256, 1817484023), -17317897)
      Assert Equals(B.or(1840020982, 1846433830), 1873706486)
      Assert Equals(B.or(-1642487163, -2106395568), -1636043051)
      Assert Equals(B.or(1706960204, 865619605), 2008969181)
    End
  End

  Describe .xor()
    It returns bitwise XOR
      Assert Equals(B.xor(0, 0), 0)
      Assert Equals(B.xor(0xffffffff, 0), 0xffffffff)
      Assert Equals(B.xor(0xffffffff, 0xffffffff), 0)
      Assert Equals(B.xor(0xf0f0f0f0, 0xf0f0f0f), 0xffffffff)
      Assert Equals(B.xor(0xf0f0f0f0, 0xf0f0f0f0), 0)
      Assert Equals(B.xor(0xffff0000, 0xffff), 0xffffffff)
      Assert Equals(B.xor(0xff000000, 0xff), 0xff0000ff)
      Assert Equals(B.xor(0xffffff00, 0xffffff), 0xff0000ff)
    End
    It returns bitwise XOR (random)
      Assert Equals(B.xor(271738232, 581446732), 848972084)
      Assert Equals(B.xor(-1493178930, 1597520677), -104341781)
      Assert Equals(B.xor(-1605313579, -452835553), 1163041994)
      Assert Equals(B.xor(-2010996666, 1805365375), -474410951)
      Assert Equals(B.xor(189013461, 1428653660), 1583586185)
      Assert Equals(B.xor(927050540, 304702767), 627625475)
      Assert Equals(B.xor(-651395973, 726399460), -228096609)
      Assert Equals(B.xor(292595176, -1074885945), -1365364945)
      Assert Equals(B.xor(1544212087, -476653766), -1080288947)
      Assert Equals(B.xor(838539477, 1024734483), 217001414)
    End
  End

  Describe .sign_extension()
    if has('num64')
      Context with 64bit number
        It applies sign extension
          " NOTE:
          " An int literal larger than or equal to 0x8000000000000000 will be rounded
          " to 0x7FFFFFFFFFFFFFFF after Vim 8.0.0219, so create it without literal
          let xFFFFFFFF00000000 = B.lshift(0xFFFFFFFF, 32)
          let xFFFFFFFF7FFFFFFF = or(0x7FFFFFFF, xFFFFFFFF00000000)
          let xFFFFFFFF80000000 = or(0x80000000, xFFFFFFFF00000000)
          let xFFFFFFFFFFFFFFFF = or(0xFFFFFFFF, xFFFFFFFF00000000)
          Assert Equals(B.sign_extension(0), 0)
          Assert Equals(B.sign_extension(-1), -1)
          Assert Equals(B.sign_extension(1), 1)
          Assert Equals(B.sign_extension(0x7FFFFFFF), 0x7FFFFFFF)
          Assert Equals(B.sign_extension(xFFFFFFFF7FFFFFFF), 0x7FFFFFFF)
          Assert Equals(B.sign_extension(0x80000000), xFFFFFFFF80000000)
          Assert Equals(B.sign_extension(xFFFFFFFF80000000), xFFFFFFFF80000000)
          Assert Equals(B.sign_extension(0xFFFFFFFF), xFFFFFFFFFFFFFFFF)
        End
      End
    else
      Context with 32bit number
        It returns the argument directly
          Assert Equals(B.sign_extension(0), 0)
          Assert Equals(B.sign_extension(-1), -1)
          Assert Equals(B.sign_extension(1), 1)
          Assert Equals(B.sign_extension(0x7FFFFFFF), 0x7FFFFFFF)
          Assert Equals(B.sign_extension(0x80000000), 0x80000000)
        End
      End
    endif
  End

  Describe .lshift32()
    if has('num64')
      Context with 64bit number
        It shifts bits to left with the 32bit range
          Assert Equals(B.lshift32(0xFFFF0000, 8), 0xFF000000)
          Assert Equals(B.lshift32(0xFFFF0000, 32), 0xFFFF0000)
        End
      End
    else
      Context with 32bit number
        It is save as lshift()
          Assert Equals(B.lshift(0, 0), 0)
          Assert Equals(B.lshift(0, 1), 0)
          Assert Equals(B.lshift(0, 31), 0)
          Assert Equals(B.lshift(0, 32), 0)
          Assert Equals(B.lshift(1, 0), 0x1)
          Assert Equals(B.lshift(1, 1), 0x2)
          Assert Equals(B.lshift(1, 31), 0x80000000)
          Assert Equals(B.lshift(0x80000000, 0), 0x80000000)

          Assert Equals(B.lshift(1, 32), 1)
          Assert Equals(B.lshift(0x80000000, 1), 0)
        End
      End
    endif
  End

  Describe .rshift32()
    if has('num64')
      Context with 64bit number
        It shifts bits to right with the 32bit range
          Assert Equals(B.rshift32(0xFFFF000000, 8), 0x00FF0000)
          Assert Equals(B.rshift32(0xFFFF0000, 32), 0xFFFF0000)
        End
      End
    else
      Context with 32bit number
        It is save as rshift()
          Assert Equals(B.rshift(0, 0), 0)
          Assert Equals(B.rshift(0, 1), 0)
          Assert Equals(B.rshift(0, 31), 0)
          Assert Equals(B.rshift(0, 32), 0)
          Assert Equals(B.rshift(0x80000000, 0), 0x80000000)
          Assert Equals(B.rshift(0x80000000, 1), 0x40000000)
          Assert Equals(B.rshift(0x80000000, 31), 0x1)
          Assert Equals(B.rshift(1, 0), 0x1)
          Assert Equals(B.rshift(1, 1), 0)

          Assert Equals(B.rshift(0x80000000, 32), 0x80000000)
          Assert Equals(B.rshift(-1024, 1), 0x7ffffe00)
        End
      End
    endif
  End

  Describe .uint8()
    It cast data
      Assert Equals(B.uint8(0x123), 0x23)
    End
  End

  Describe .uint16()
    It cast data
      Assert Equals(B.uint16(0x12345), 0x2345)
    End
  End

  Describe .uint32()
    It cast data
      if has('num64')
        Assert Equals(B.uint32(0x123456789), 0x23456789)
      else
        Assert Equals(B.uint32(0x23456789), 0x23456789)
      endif
    End
  End

  Describe .uint64()
    It cast data
      if has('num64')
        Assert Equals(B.uint64(0x2345678923456789), 0x2345678923456789)
      else
        Throws /^vital: Bitwise:/ B.uint64(0)
      endif
    End
  End


  Describe .rotate8l()
    It cast data
      Assert Equals(B.rotate8l(0b11001001, 3), 0b01001110)
    End
  End

  Describe .rotate8r()
    It cast data
      Assert Equals(B.rotate8r(0b11001001, 5), 0b01001110)
    End
  End

  Describe .rotate16l()
    It cast data
      Assert Equals(B.rotate16l(0b0000000011001001, 11), 0b0100100000000110)
    End
  End

  Describe .rotate16r()
    It cast data
      Assert Equals(B.rotate16r(0b0000000011001001, 5), 0b0100100000000110)
    End
  End

  Describe .rotate32l()
    It cast data
      " input
      " 0b 00001111 10100101 00000000 11001001
      " rotl 27
      " output
      " 0b  01001 <-- 00001111 10100101  00000000  110
      Assert Equals(B.rotate32l(0b00001111101001010000000011001001, 27), 0b01001000011111010010100000000110)
    End
  End

  Describe .rotate32l()
    It cast data
      " input
      " 0b 00001111 10100101 00000000 11001001
      " rotr 5
      " output
      " 0b  01001 --> 00001111 10100101  00000000  110
      Assert Equals(B.rotate32r(0b00001111101001010000000011001001, 5), 0b01001000011111010010100000000110)
    End
  End

  Describe .rotate64l()
    if has('num64')
      It cast data
        " input
        " 0b 00001111 10100101 00000000 11001001 00000000 11111111 10101010 01010101
        " rotl 27
        " output
        " 0b  01001 00000000 11111111 10101010 01010101 <-- 00001111 10100101  00000000  110
        " Assert Equals(B.rotate64l(0b0000111110100101000000001100100100000000111111111010101001010101 , 27), 0b0100100000000111111111010101001010101000011111010010100000000110)
        Assert Equals(B.rotate64l(0x0FA500C900FFAA55 , 27), 0x4807FD52A87D2806)
      End
    else
      It cast data
        Throws /^vital: Bitwise:/ B.rotate64l(0,0)
      End
    endif
  End

  Describe .rotate64r()
    if has('num64')
      It cast data
        " input
        " 0b 00001111 10100101 00000000 11001001 00000000 11111111 10101010 01010101
        " rotr 37
        " output
        " 0b  01001 00000000 11111111 10101010 01010101 --> 00001111 10100101  00000000  110
        " Assert Equals(B.rotate64r(0b0000111110100101000000001100100100000000111111111010101001010101 , 37), 0b0100100000000111111111010101001010101000011111010010100000000110)
        Assert Equals(B.rotate64r(0x0FA500C900FFAA55 , 37), 0x4807FD52A87D2806)
      End
    else
      It cast data
        Throws /^vital: Bitwise:/ B.rotate64r(0,0)
      End
    endif
  End
End
