Describe Vim.Type
  Before all
    let T = vital#vital#import('Vim.Type')
  End

  Describe .types
    It has .number
      Assert Equals(T.types.number, type(0))
    End
    It has .string
      Assert Equals(T.types.string, type(''))
    End
    It has .func
      Assert Equals(T.types.func, type(function('type')))
    End
    It has .list
      Assert Equals(T.types.list, type([]))
    End
    It has .dict
      Assert Equals(T.types.dict, type({}))
    End
    It has .float
      Assert Equals(T.types.float, type(0.0))
    End
    if 800 <= v:version
      It has .bool
        Assert Equals(T.types.bool, type(v:true))
      End
      It has .none
        Assert Equals(T.types.none, type(v:none))
      End
      It has .job
        Assert Equals(T.types.job, type(test_null_job()))
      End
      It has .channel
        Assert Equals(T.types.channel, type(test_null_channel()))
      End
    endif
    if has('patch-8.1.0735')
      It has .blob
        Assert Equals(T.types.blob, type(0z00))
      End
    endif
    It is locked
      Assert True(islocked('T.types'))
    End
  End

  Describe .type_names
    It can get name of "number"
      Assert Equals(T.type_names[type(0)], 'number')
    End
    It can get name of "string"
      Assert Equals(T.type_names[type('')], 'string')
    End
    It can get name of "func"
      Assert Equals(T.type_names[type(function('type'))], 'func')
    End
    It can get name of "list"
      Assert Equals(T.type_names[type([])], 'list')
    End
    It can get name of "dict"
      Assert Equals(T.type_names[type({})], 'dict')
    End
    It can get name of "float"
      Assert Equals(T.type_names[type(0.0)], 'float')
    End
    if 800 <= v:version
      It can get name of "bool"
        Assert Equals(T.type_names[type(v:true)], 'bool')
      End
      It can get name of "none"
        Assert Equals(T.type_names[type(v:none)], 'none')
      End
      It can get name of "job"
        Assert Equals(T.type_names[type(test_null_job())], 'job')
      End
      It can get name of "channel"
        Assert Equals(T.type_names[type(test_null_channel())], 'channel')
      End
    endif
    if has('patch-8.1.0735')
      It can get name of "blob"
        Assert Equals(T.type_names[type(0z00)], 'blob')
      End
    endif
    It is locked
      Assert True(islocked('T.type_names'))
    End
  End

  Describe .is_numeric()
    Context when {value} is a Number
      It returns TRUE
        Assert True(T.is_numeric(0))
        Assert True(T.is_numeric(10))
        Assert True(T.is_numeric(-99999999))
      End
    End
    Context when {value} is a Float
      It returns TRUE
        Assert True(T.is_numeric(0.0))
        Assert True(T.is_numeric(-999.999))
        Assert True(T.is_numeric(0.0 / 0.0))
      End
    End
    Context when {value} is not a Number or a Float
      It returns FALSE
        Assert False(T.is_numeric('10'))
        Assert False(T.is_numeric([10]))
      End
    End
  End

  if 800 <= v:version
    Describe .is_special()
      Context when {value} is a Special value
        It returns TRUE
          Assert True(T.is_special(v:false))
          Assert True(T.is_special(v:true))
          Assert True(T.is_special(v:null))
          Assert True(T.is_special(v:none))
        End
      End
      Context when {value} is not a Special value
        It returns FALSE
          Assert False(T.is_special(1))
          Assert False(T.is_special(0))
        End
      End
    End
  endif

  Describe .is_predicate()
    Context when {value} is a predicate
      It returns TRUE
        Assert True(T.is_predicate(10))
        Assert True(T.is_predicate('10'))
        if 800 <= v:version
          Assert True(T.is_predicate(v:true))
          Assert True(T.is_predicate(v:none))
        endif
      End
    End
    Context when {value} is not a predicate
      It returns FALSE
        Assert False(T.is_predicate(function('type')))
        Assert False(T.is_predicate([10]))
        Assert False(T.is_predicate({'value': 10}))
        Assert False(T.is_predicate(1.0))
        if 800 <= v:version
          Assert False(T.is_predicate(test_null_job()))
          Assert False(T.is_predicate(test_null_channel()))
        endif
      End
    End
  End

  Describe .is_comparable()
    Before each
      let vals = [0, '', function('type'), [], {}, 0.0]
      if 800 <= v:version
        let vals += [v:false, v:null, test_null_job(), test_null_channel()]
      endif
      if has('patch-8.1.0735')
        let vals += [0z00]
      endif

      let true_group = []
      let false_group = []
      for l:V1 in vals
        for l:V2 in vals
          try
            let _ = V1 == V2
            let true_group += [[V1, V2]]
          catch
            let false_group += [[V1, V2]]
          endtry
          unlet V2
        endfor
        unlet V1
      endfor
    End

    Context when {value1} and {value2} can be compared by ==
      It returns TRUE
        for [l:V1, l:V2] in true_group
          let tname1 = T.type_names[type(V1)]
          let tname2 = T.type_names[type(V2)]
          let msg = printf('%s and %s is comparable', tname1, tname2)
          Assert True(T.is_comparable(V1, V2), msg)
          unlet V1 V2
        endfor
      End
    End

    Context when {value1} and {value2} can not be compared by ==
      It returns FALSE
        for [l:V1, l:V2] in false_group
          let tname1 = T.type_names[type(V1)]
          let tname2 = T.type_names[type(V2)]
          let msg = printf('%s and %s is not comparable', tname1, tname2)
          Assert False(T.is_comparable(V1, V2), msg)
          unlet V1 V2
        endfor
      End
    End
  End
End
