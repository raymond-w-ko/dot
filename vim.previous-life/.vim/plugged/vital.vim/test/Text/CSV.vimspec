
Describe Text.CSV
  Before all
    let CSV = vital#vital#new().import('Text.CSV')
    let testdata_dir = expand('<sfile>:p:h') . '/test/_testdata/Text/CSV'
    let sample_file_in = testdata_dir . '/csv-sample-in.txt'
    let sample_file_out = testdata_dir . '/csv-sample-out.txt'
    let expect_data = [
    \   ['foo', 'bar'],
    \   ['foo', 'bar'],
    \   [],
    \   [' '],
    \   ["\t"],
    \   [' ', 'bar'],
    \   ['foo', ' '],
    \   ['', ''],
    \   ['', ''],
    \   ['', ''],
    \   ['foo"bar', 'baz'],
    \   ['"foobar', 'baz'],
    \   ['foobar"', 'baz'],
    \   ['"foobar"', 'baz'],
    \   ['foo,bar', 'baz'],
    \   [',foobar', 'baz'],
    \   ['foobar,', 'baz'],
    \   [',foobar,', 'baz'],
    \ ]
  End

  Context .parse()
    It parses records of CSV
      let csv_data = join(readfile(sample_file_in), "\n")
      Assert Equals(expect_data, CSV.parse(csv_data))
    End
  End

  Context .parse_record()
    It parses an CSV file
      let csv_record = readfile(sample_file_in, 0, 1)[0]
      let expect_record = ['foo', 'bar']
      Assert Equals(expect_record, CSV.parse_record(csv_record))
    End
    It throws an exception when invalid data was passed
      " unclosed double-quote.
      Throws /.*/ CSV.parse_record('"foo')
    
      " The line which has double-quote(s) or comma(s)
      " must be wrapped by double-quotes.
      Throws /.*/ CSV.parse_record('foo"bar')
    End
  End

  Context .parse_file()
    It parses an CSV file
      Assert Equals(expect_data, CSV.parse_file(sample_file_in))
    End
  End

  Context .dump()
    It converts a list objects to a CSV string
      let out_string = join(readfile(sample_file_out), "\n")
      Assert Equals(out_string, CSV.dump(expect_data))
    End
    It converts an object to a CSV string
      Throws /.*/ CSV.dump('string')
      Throws /.*/ CSV.dump(0)
      Throws /.*/ CSV.dump({'dummy': 1})
    End
  End

  Context .dump_file()
    It dumps the data to a file
      let tempfile = tempname()
      try
        call CSV.dump_file(expect_data, tempfile)
        Assert Equals(readfile(sample_file_out), readfile(tempfile))
      catch
        execute printf('Fail %s', v:exception)
      finally
        if filereadable(tempfile)
          call delete(tempfile)
        endif
      endtry
    End
    It can append the data to a file
      let tempfile = tempname()
      try
        let out_lines = readfile(sample_file_out)
 
        " 1st line, 1-2 lines, 1-1 lines, ...
        for i in range(len(expect_data))
          call CSV.dump_file([expect_data[i]], tempfile, 1)
          Assert Equals(out_lines[0 : i], readfile(tempfile))
        endfor
      catch
        execute printf('Fail %s', v:exception)
      finally
        if filereadable(tempfile)
          call delete(tempfile)
        endif
      endtry
    End
  End

End

