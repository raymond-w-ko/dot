Describe Data.Either
  Before all
    let Either = vital#vital#import('Data.Either')
    let s:Either = Either

    function! Succ(x) abort
      return a:x + 1
    endfunction

    function! LiftSucc(x) abort
      return s:Either.return(a:x + 1)
    endfunction
  End

  After all
    delfunction Succ
    delfunction LiftSucc
  End

  Describe .left()
    It can wrap any value
      let a = Either.left(10)
      let b = Either.left([10, 20])
      let c = Either.left({})
      let d = Either.left('either is great')
      let e = Either.left(Either.left(10))
    End
  End

  Describe .right()
    It can wrap any value
      let a = Either.right(10)
      let b = Either.right([10, 20])
      let c = Either.right({})
      let d = Either.right('either is great')
      let e = Either.right(Either.right(10))
    End
  End

  Describe .is_left()
    It returns true if a left value is given
      let left = Either.left(10)
      Assert True(Either.is_left(left))
    End

    It return false if another value is given
      let right = Either.right(10)
      let a     = 10
      let b     = [10, 20]
      let c     = {}
      let d     = 'anatano-minarinsuki'

      Assert False(Either.is_left(right))
      Assert False(Either.is_left(a))
      Assert False(Either.is_left(b))
      Assert False(Either.is_left(c))
      Assert False(Either.is_left(d))
    End
  End

  Describe .is_right()
    It returns true if a right value is given
      let right = Either.right(10)
      Assert True(Either.is_right(right))
    End

    It returns false if another value is given
      let left = Either.left(10)
      let a    = 10
      let b    = [10, 20]
      let c    = {}
      let d    = 'love-arrow'

      Assert False(Either.is_right(left))
      Assert False(Either.is_right(a))
      Assert False(Either.is_right(b))
      Assert False(Either.is_right(c))
      Assert False(Either.is_right(d))
    End
  End

  Describe .is_either()
    It returns true if the left value or the right value is given
      let left  = Either.left(10)
      let right = Either.right(10)

      Assert True(Either.is_either(left))
      Assert True(Either.is_either(right))
    End

    It returns false if another value is given
      let a = 10
      let b = [10, 20]
      let c = {}
      let d = 'poi poi'

      Assert False(Either.is_either(a))
      Assert False(Either.is_either(b))
      Assert False(Either.is_either(c))
      Assert False(Either.is_either(d))
    End
  End

  Describe .unsafe_from_left()
    It extracts a left value to a mere value
      let left = Either.left(10)
      Assert Equals(Either.unsafe_from_left(left), 10)
    End

    It throws an exception if a right value is given
      let right = Either.right(10)
      Throws /^vital: Data.Either:/ Either.unsafe_from_left(right)
    End
  End

  Describe .unsafe_from_right()
    It extracts a right value to a mere value
      let right = Either.right(10)
      Assert Equals(Either.unsafe_from_right(right), 10)
    End

    It throws an exception if a left value is given
      let left = Either.left(10)
      Throws /^vital: Data.Either:/ Either.unsafe_from_right(left)
    End
  End

  Describe .from_left()
    It extracts a left value to a mere value
      Assert Equals(Either.from_left(-10, Either.left(10)), 10)
    End

    It returns a default value if a right value is given
      Assert Equals(Either.from_left(-10, Either.right(10)), -10)
    End
  End

  Describe .from_right()
    It extracts a right value to a mere value
      Assert Equals(Either.from_right(-10, Either.right(10)), 10)
    End

    It returns a default value if a left value is given
      Assert Equals(Either.from_right(-10, Either.left(10)), -10)
    End
  End

  Describe .map()
    It maps content to a right value
      Assert Equals(Either.map(Either.right(10), function('Succ')), Either.right(11))
      Assert Equals(Either.map(Either.right(10), 'v:val + 1'), Either.right(11))
    End

    It doesn't map content to a left value
      Assert Equals(Either.map(Either.left(0), function('Succ')), Either.left(0))
      Assert Equals(Either.map(Either.left(0), 'v:val + 1'), Either.left(0))
    End
  End

  Describe .map_left()
    It maps content to a left value
      Assert Equals(Either.map_left(Either.left(10), function('Succ')), Either.left(11))
      Assert Equals(Either.map_left(Either.left(10), 'v:val + 1'), Either.left(11))
    End

    It doesn't map content to a right value
      Assert Equals(Either.map_left(Either.right(0), function('Succ')), Either.right(0))
      Assert Equals(Either.map_left(Either.right(0), 'v:val + 1'), Either.right(0))
    End
  End

  Describe .bimap()
    Before all
      function! AppendD(x) abort
        return a:x . 'D'
      endfunction
    End

    After all
      delfunction AppendD
    End

    It maps a left function to a left value, a right function to a right value.
      Assert Equals(Either.bimap(Either.left(0), function('Succ'), function('AppendD')), Either.left(1))
      Assert Equals(Either.bimap(Either.left(0), 'v:val + 1', 'v:val . "D"'), Either.left(1))

      Assert Equals(Either.bimap(Either.right(':'), function('Succ'), function('AppendD')), Either.right(':D'))
      Assert Equals(Either.bimap(Either.right(':'), 'v:val + 1', 'v:val . "D"'), Either.right(':D'))
    End
  End

  Describe .apply()
    Before all
      function! Plus(x, y) abort
        return a:x + a:y
      endfunction

      function! Compose(g, f, x) abort
        return a:g(a:f(a:x))
      endfunction
    End

    After all
      delfunction Plus
    End

    It applies right values to a right function
      let right_func_x = Either.right(function('Succ'))
      let right_func_y = Either.right('v:val + 1')
      let right_func_z = Either.right(function('Plus'))
      let right_func_w = Either.right(function('Compose'))  " The higher function

      Assert Equals(Either.apply(right_func_x, Either.right(10)), Either.right(11))
      Assert Equals(Either.apply(right_func_y, Either.right(10)), Either.right(11))
      Assert Equals(Either.apply(right_func_z, Either.right(10), Either.right(20)), Either.right(30))
      Assert Equals(Either.apply(right_func_w, right_func_x, Either.right(function('len')), Either.right([1, 2, 3])), Either.right(4))
    End

    It doesn't apply left values to a right function
      let right_func_x = Either.right(function('Succ'))
      let right_func_y = Either.right('v:val + 1')
      let right_func_z = Either.right(function('Plus'))
      let left_value  = Either.left(10)
      let right_value = Either.right(30)

      Assert Equals(Either.apply(right_func_x, left_value), left_value)
      Assert Equals(Either.apply(right_func_y, left_value), left_value)
      Assert Equals(Either.apply(right_func_z, left_value, right_value), left_value)
      Assert Equals(Either.apply(right_func_z, right_value, left_value), left_value)
    End

    It doesn't apply right values and left values to a left function
      let left_func_x = Either.left(function('Succ'))
      let left_func_y = Either.left('v:val + 1')
      let left_func_z = Either.left(function('Plus'))

      Assert Equals(Either.apply(left_func_x, Either.right(10)), left_func_x)
      Assert Equals(Either.apply(left_func_y, Either.right(10)), left_func_y)
      Assert Equals(Either.apply(left_func_x, Either.left(10)), left_func_x)
      Assert Equals(Either.apply(left_func_y, Either.left(10)), left_func_y)
      Assert Equals(Either.apply(left_func_z, Either.right(10), Either.right(20)), left_func_z)
      Assert Equals(Either.apply(left_func_z, Either.left(10),  Either.right(20)), left_func_z)
      Assert Equals(Either.apply(left_func_z, Either.right(10), Either.left(20)),  left_func_z)
      Assert Equals(Either.apply(left_func_z, Either.left(10),  Either.left(20)),  left_func_z)
    End
  End

  Describe .join()
    It can remove one right if it is nested right
      let right       = Either.right(10)
      let right_right = Either.right(right)
      Assert Equals(Either.join(right_right), right)
    End

    It throws an exception if unnested right is given
      let right = Either.right(10)
      Throws /^vital: Data.Either:/ Either.join(right)
    End

    It doesn't remove left
      let left_left  = Either.left(Either.left(10))
      let left_right = Either.left(Either.right(20))

      Assert Equals(Either.join(left_left), left_left)
      Assert Equals(Either.join(left_right), left_right)
    End
  End

  Describe .bind()
    It applies a lift function to a right value
      let right = Either.right(10)
      Assert Equals(Either.bind(right, function('LiftSucc')), Either.right(11))
    End

    It doesn't apply a lift function to a left value
      let left = Either.left(10)
      Assert Equals(Either.bind(left, function('LiftSucc')), left)
    End
  End

  Describe .flat_map()
    It is same as .bind()
      let left  = Either.left(10)
      let right = Either.right(20)

      Assert Equals(Either.flat_map(left, function('LiftSucc')), Either.bind(left, function('LiftSucc')))
      Assert Equals(Either.flat_map(right, function('LiftSucc')), Either.bind(right, function('LiftSucc')))
    End
  End

  Describe .return()
    It is same as .right()
      let right          = Either.right(10)
      let mval_of_either = Either.return(10)

      Assert Equals(right, mval_of_either)
    End
  End

  Describe .null_to_left()
    It returns a left value with the error message if v:null is given
      if exists('v:null')
        let errMsg = 'error'
        Assert Equals(Either.null_to_left(v:null, errMsg), Either.left(errMsg))
      endif
    End

    It returns a right value if a valid value is given
      if exists('v:null')
        let valid_value = 10
        Assert Equals(Either.null_to_left(valid_value, 'error'), Either.right(valid_value))
      endif
    End
  End

  Describe as monad
    Before all
      function! LiftToString(x) abort
        return s:Either.return(string(a:x))
      endfunction

      function! TestLeftIdLaw(m) abort
        let result_left  = a:m.bind(a:m.return(10), function('LiftSucc'))
        let result_right = LiftSucc(10)
        return result_left ==# result_right
      endfunction

      function! TestRightIdLaw(m) abort
        "NOTE: Can I refactor this dirty closure ?
        " Workaround of the closure for vim7.4 test
        let s:m = a:m
        function! s:return(x) abort
          return s:m.return(a:x)
        endfunction

        let mval = a:m.return(10)
        return a:m.bind(mval, function('s:return')) ==# mval
      endfunction

      function! TestAssocLaw(m) abort
        let s:m = a:m
        function! s:fg(x) abort
          let l:mval = LiftSucc(a:x)
          return s:m.bind(l:mval, function('LiftToString'))
        endfunction

        let mval = a:m.return(10)
        let result_left  = a:m.bind(a:m.bind(mval, function('LiftSucc')), function('LiftToString'))
        let result_right = a:m.bind(mval, function('s:fg'))

        return result_left ==# result_right
      endfunction
    End

    After all
      delfunction LiftToString
      delfunction TestLeftIdLaw
      delfunction TestRightIdLaw
      delfunction TestAssocLaw
    End

    It satisfies left identity law
      Assert True(TestLeftIdLaw(Either))
    End

    It satisfies right identity law
      Assert True(TestRightIdLaw(Either))
    End

    It satisfies associative law
      Assert True(TestAssocLaw(Either))
    End
  End
End
" vim:ts=2:sw=2:et
