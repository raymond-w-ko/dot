*printf.txt* Turn lines into printf statements

Maintainer:	Anton Lindqvist <anton@basename.se>
Version:	0.4.4

1. Printf	|printf|
2. Pattern	|b:printf_pattern|

=============================================================================
1. Printf					*printf*

Turn a line consisting of tokens separated by commas into a printf statement.
A token is recognized as a sequence of any characters except for whitespace
and comma but with respect to balanced brackets and parentheses. Examples
showing the line before and after invoking |:Printf|:

	Before		After
	x		printf("x=%d\n", x);
	x, x/y		printf("x=%d, x/y=%d\n", x, x/y);
	pow(x, y)	printf("pow(x, y)=%d\n", pow(x, y));
	strlen("x")	printf("strlen(\"x\")=%d\n", strlen("x"));

The default |b:printf_pattern| assumes that every token is an integer
expression. Deducting the correct type of each token is hard. However, the
cursor is moved to the first directive (%) which allows for modification of
the conversion specifier. Pressing |;| will therefore move the cursor to the
next directive.

						*:Printf*
:Printf			Turn the current line into a printf statement.
			Invoking |:Printf| again on the same line will undo
			the change, transforming the line back to its previous
			state.

=============================================================================
2. Pattern					*b:printf_pattern*

The pattern used to construct the printf statement can be specified using
|b:printf_pattern| and defaults to:

	printf("%d\n", %s);

The pattern must include exactly two substitution directives, meaning a "%"
character followed by one or more |/\w| characters or a period. The first
directive will be used as the directive in the format string and the latter
will be substituted with the current line. A literal "%" character may be
escaped as "%%". Examples using different patterns showing the line before and
after invoking |:Printf|:

	Pattern			Before	After
	printf("%d\n", %s)	x	printf("x=%d\n", x)
	printf("%s\n", %s)	x	printf("x=%s\n", x)
	printf("%.2f\n", %s)	x	printf("x=%.2f\n", x)

Since |b:printf_pattern| is a |buffer-variable| the pattern can be altered
for a given |FileType|. Below is a list of sensible patterns for different
filetypes:

	au FileType awk		let b:printf_pattern = 'printf "%s\n", %s'
	au FileType c		let b:printf_pattern = 'printf("%%s: %d\n", __func__, %s);'
	au FileType go		let b:printf_pattern = 'fmt.Printf("%+v\n", %s)'
	au FileType java	let b:printf_pattern = 'System.out.format("%d%%n", %s);'
	au FileType python	let b:printf_pattern = 'print("%{}".format(%s))'
	au FileType ruby	let b:printf_pattern = 'printf("%p\n", %s)'
	au FileType sh		let b:printf_pattern = 'printf ''%s\n'' %s'
	au FileType vim		let b:printf_pattern = 'echom printf("%s", %s)'

  vim:tw=78:ts=8:ft=help:norl:
